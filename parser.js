/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,8],$V2=[1,9],$V3=[1,12],$V4=[1,22],$V5=[1,30],$V6=[1,31],$V7=[1,32],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,29],$Vd=[1,28],$Ve=[1,21],$Vf=[1,33],$Vg=[1,34],$Vh=[2,5,11,12,15,22,28,31,32,33,44,45,46,49,53,55,56,57,67,114,115],$Vi=[1,44],$Vj=[1,53],$Vk=[1,54],$Vl=[2,5,11,12,15,22,28,30,31,32,33,34,44,45,46,49,53,55,56,57,67,85,97,98,99,100,101,102,114,115],$Vm=[25,71],$Vn=[1,71],$Vo=[1,87],$Vp=[1,72],$Vq=[1,70],$Vr=[1,79],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,91],$Vz=[2,144],$VA=[1,97],$VB=[1,118],$VC=[1,115],$VD=[1,114],$VE=[1,116],$VF=[1,117],$VG=[1,123],$VH=[1,125],$VI=[1,126],$VJ=[1,132],$VK=[1,131],$VL=[1,127],$VM=[1,128],$VN=[1,129],$VO=[1,130],$VP=[1,133],$VQ=[1,134],$VR=[1,135],$VS=[1,136],$VT=[1,137],$VU=[1,138],$VV=[1,139],$VW=[24,25,31,36,45,46,54,71,74,75,86,87,88,89,90,91,92,93,94,95,96,113],$VX=[1,153],$VY=[1,156],$VZ=[22,24,25,31,36,44,45,46,54,65,71,74,75,86,87,88,89,90,91,92,93,94,95,96,113],$V_=[1,161],$V$=[24,71,86],$V01=[1,173],$V11=[25,30,36,44,71,75,85],$V21=[36,71],$V31=[24,25,31,36,45,46,54,71,74,75,86,87,88,89,91,92,93,94,95,96,113],$V41=[24,25,31,36,54,71,86,95,96,113],$V51=[22,24,25,31,36,44,45,46,54,65,71,74,75,85,86,87,88,89,90,91,92,93,94,95,96,113],$V61=[1,218],$V71=[24,25,31,36,45,46,54,71,74,75,86,91,92,93,94,95,96,113],$V81=[24,25,31,36,54,71,74,75,86,91,92,93,94,95,96,113],$V91=[24,25,31,36,54,71,86,93,94,95,96,113],$Va1=[1,242],$Vb1=[1,243],$Vc1=[1,247],$Vd1=[25,30,36,44,71,85],$Ve1=[31,53,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VARIABLE":7,"DECLARACION_FUNCION":8,"ASIGNACION":9,"PUSH_ARREGLO":10,"CONSOLA_MOSTRAR":11,"INSTRUCCION_SISAS":12,"SWITCH":13,"BREAK":14,"DEVUELVE":15,"CONTINUE":16,"BUCLE":17,"HACER_BUCLE":18,"REPETIDOR":19,"LLAMADA_FUNCION":20,"INCREMENTO_DECREMENTO":21,"id":22,"MENOR":23,"MAYOR":24,"punto_coma":25,"LISTA_EXPRESIONES":26,"LLAMADA_FUNCION_EXP":27,"bucle":28,"EXP":29,"llave_izq":30,"llave_der":31,"hacer":32,"repetidor":33,"par_izq":34,"ASIGNACION_PARA":35,"par_der":36,"PARA_OF":37,"TIPO_DEC_VARIABLE":38,"of":39,"PARA_IN":40,"in":41,"LISTA_ACCESOS_TYPE":42,"ACCESO_ARREGLO":43,"asignacion":44,"mas":45,"menos":46,"mas_mas":47,"menos_menos":48,"switch":49,"LISTA_CASE":50,"CASE":51,"DEFAULT":52,"case":53,"dos_puntos":54,"default":55,"continue":56,"break":57,"RETORNO":58,"retorno":59,"INSTRUCCION_SI":60,"SI":61,"NONADA":62,"LISTA_SINO_SI":63,"SINO_SI":64,"punto":65,"push":66,"funcion":67,"TIPO_VARIABLE_NATIVA":68,"LISTA_CORCHETES":69,"LISTA_PARAMETROS":70,"coma":71,"PARAMETRO":72,"Array":73,"menor":74,"mayor":75,"LISTA_ATRIBUTOS":76,"ATRIBUTO":77,"LISTA_DECLARACIONES":78,"DEC_ID":79,"DEC_ID_TIPO":80,"DEC_ID_TIPO_CORCHETES":81,"DEC_ID_EXP":82,"DEC_ID_TIPO_EXP":83,"DEC_ID_TIPO_CORCHETES_EXP":84,"cor_izq":85,"cor_der":86,"por":87,"div":88,"mod":89,"potencia":90,"mayor_igual":91,"menor_igual":92,"igual_que":93,"dif_que":94,"and":95,"or":96,"no":97,"tero":98,"catring":99,"true":100,"false":101,"null":102,"ARRAY_LENGTH":103,"ARRAY_POP":104,"ACCESO_TYPE":105,"TYPE":106,"TERNARIO":107,"ATRIBUTOS_TYPE":108,"ATRIBUTO_TYPE":109,"length":110,"LISTA_ACCESOS_ARREGLO":111,"pop":112,"interrogacion":113,"let":114,"const":115,"boolean":116,"vacio":117,"ESCRIBA_REGISTRO":118,"escriba":119,"registro":120,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"CONSOLA_MOSTRAR",12:"INSTRUCCION_SISAS",15:"DEVUELVE",22:"id",23:"MENOR",24:"MAYOR",25:"punto_coma",28:"bucle",30:"llave_izq",31:"llave_der",32:"hacer",33:"repetidor",34:"par_izq",36:"par_der",39:"of",41:"in",44:"asignacion",45:"mas",46:"menos",47:"mas_mas",48:"menos_menos",49:"switch",53:"case",54:"dos_puntos",55:"default",56:"continue",57:"break",59:"retorno",65:"punto",66:"push",67:"funcion",71:"coma",73:"Array",74:"menor",75:"mayor",85:"cor_izq",86:"cor_der",87:"por",88:"div",89:"mod",90:"potencia",91:"mayor_igual",92:"menor_igual",93:"igual_que",94:"dif_que",95:"and",96:"or",97:"no",98:"tero",99:"catring",100:"true",101:"false",102:"null",110:"length",112:"pop",113:"interrogacion",114:"let",115:"const",116:"boolean",117:"vacio",119:"escriba",120:"registro"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[20,4],[20,5],[27,3],[27,4],[17,7],[18,9],[19,10],[19,10],[37,10],[40,10],[9,4],[9,5],[9,4],[9,1],[9,2],[9,2],[35,3],[35,2],[35,2],[13,7],[50,2],[50,1],[50,1],[50,2],[51,4],[52,3],[16,2],[14,2],[58,3],[58,2],[60,1],[60,2],[60,2],[60,3],[61,7],[62,4],[64,8],[63,2],[63,1],[10,7],[10,8],[8,9],[8,10],[8,7],[8,10],[8,11],[8,8],[70,3],[70,1],[72,3],[72,4],[72,6],[76,3],[76,1],[77,3],[77,4],[7,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[84,6],[83,5],[82,3],[80,3],[79,1],[81,4],[69,3],[69,2],[21,3],[21,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[106,3],[108,3],[108,1],[109,3],[103,3],[103,4],[103,4],[104,5],[104,6],[104,6],[107,5],[43,2],[105,2],[42,3],[42,2],[42,4],[42,3],[111,4],[111,3],[26,3],[26,1],[38,1],[38,1],[68,1],[68,1],[68,1],[68,1],[68,1],[118,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'S', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 3:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 19:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 20:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 21:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 22:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION_EXP', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 23:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION_EXP', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'BUCLE', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'HACER_BUCLE', hijos: [$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 26: case 27:
 this.$ = new NodoAST({label: 'REPETIDOR', hijos: [$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 28:
 this.$ = new NodoAST({label: 'PARA_OF', hijos: [$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 29:
 this.$ = new NodoAST({label: 'PARA_IN', hijos: [$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 30: case 32:
 this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 31:
 this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 33:
 this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 34: case 35:
 this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 36:
 this.$ = new NodoAST({label: 'ASIGNACION_PARA', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 37: case 38:
 this.$ = new NodoAST({label: 'ASIGNACION_PARA', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 39:
 this.$ = new NodoAST({label: 'SWITCH', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 40: case 43:
 this.$ = new NodoAST({label: 'LISTA_CASE', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 41: case 42:
 this.$ = new NodoAST({label: 'LISTA_CASE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 44:
 this.$ = new NodoAST({label: 'CASE', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 45:
 this.$ = new NodoAST({label: 'DEFAULT', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 46:
 this.$ = new NodoAST({label: 'CONTINUE', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 47:
 this.$ = new NodoAST({label: 'BREAK', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 48:
 this.$ = new NodoAST({label: 'RETORNO', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 49:
 this.$ = new NodoAST({label: 'RETORNO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 50:
 this.$ = new NodoAST({label: 'INSTRUCCION_SI', hijos: [$$[$0]], linea: yylineno}); 
break;
case 51: case 52:
 this.$ = new NodoAST({label: 'INSTRUCCION_SI', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 53:
 this.$ = new NodoAST({label: 'INSTRUCCION_SI', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 54:
 this.$ = new NodoAST({label: 'SI', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 55:
 this.$ = new NodoAST({label: 'NONADA', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 56:
 this.$ = new NodoAST({label: 'SINO_SI', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 57:
 this.$ = new NodoAST({label: 'LISTA_SINO_SI', hijos: [...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 58:
 this.$ = new NodoAST({label: 'LISTA_SINO_SI', hijos: [$$[$0]], linea: yylineno}); 
break;
case 59:
 this.$ = new NodoAST({label: 'PUSH_ARREGLO', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 60:
 this.$ = new NodoAST({label: 'PUSH_ARREGLO', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 61:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 62: case 64:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 63:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 65:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-10], $$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 66:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 67:
 this.$ = new NodoAST({label: 'LISTA_PARAMETROS', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 68:
 this.$ = new NodoAST({label: 'LISTA_PARAMETROS', hijos: [$$[$0]], linea: yylineno}); 
break;
case 69:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [$$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 70:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 71:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 72:
 this.$ = new NodoAST({label: 'LISTA_ATRIBUTOS', hijos: [$$[$0-2],$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 73:
 this.$ = new NodoAST({label: 'LISTA_ATRIBUTOS', hijos: [$$[$0]], linea: yylineno}); 
break;
case 74:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 75:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 76:
 this.$ = new NodoAST({label: 'DECLARACION_VARIABLE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno});  
break;
case 77: case 78: case 79: case 80: case 81: case 82:
 this.$ = new NodoAST({label: 'LISTA_DECLARACIONES', hijos: [...$$[$0-2].hijos,$$[$0]], linea: yylineno}); 
break;
case 83: case 84: case 85: case 86: case 87: case 88:
 this.$ = new NodoAST({label: 'LISTA_DECLARACIONES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 89:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO_CORCHETES_EXP', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 90:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO_EXP', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 91:
 this.$ = new NodoAST({label: 'DEC_ID_EXP', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 92:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 93:
 this.$ = new NodoAST({label: 'DEC_ID', hijos: [$$[$0]], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO_CORCHETES', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 95:
 this.$ = new NodoAST({label: 'LISTA_CORCHETES', hijos: [...$$[$0-2].hijos, '[]'], linea: yylineno}); 
break;
case 96:
 this.$ = new NodoAST({label: 'LISTA_CORCHETES', hijos: ['[]'], linea: yylineno}); 
break;
case 97: case 98:
 this.$ = new NodoAST({label: 'INCREMENTO_DECREMENTO', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 99: case 106: case 107: case 117:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 100: case 101: case 102: case 103: case 104: case 105: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 118:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'TERO', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 119:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'CATRING', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 120:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'ID', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 121: case 122:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'SIONO', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 123:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'NULL', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 124:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 125:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 126: case 127: case 128: case 129: case 130: case 131: case 132:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0]], linea: yylineno}); 
break;
case 133:
 this.$ = new NodoAST({label: 'TYPE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 134:
 this.$ = new NodoAST({label: 'ATRIBUTOS_TYPE', hijos: [$$[$0-2],$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 135:
 this.$ = new NodoAST({label: 'ATRIBUTOS_TYPE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 136:
 this.$ = new NodoAST({label: 'ATRIBUTO_TYPE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 137:
 this.$ = new NodoAST({label: 'ARRAY_LENGTH', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 138: case 139:
 this.$ = new NodoAST({label: 'ARRAY_LENGTH', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 140:
 this.$ = new NodoAST({label: 'ARRAY_POP', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 141: case 142:
 this.$ = new NodoAST({label: 'ARRAY_POP', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 143:
 this.$ = new NodoAST({label: 'TERNARIO', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 144:
 this.$ = new NodoAST({label: 'ACCESO_ARREGLO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 145:
 this.$ = new NodoAST({label: 'ACCESO_TYPE', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 146:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_TYPE', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 147:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_TYPE', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 148:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_TYPE', hijos: [...$$[$0-3].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 149:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_TYPE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 150:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_ARREGLO', hijos: [...$$[$0-3].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 151:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_ARREGLO', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 152:
 this.$ = new NodoAST({label: 'LISTA_EXPRESIONES', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 153:
 this.$ = new NodoAST({label: 'LISTA_EXPRESIONES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 154: case 155:
 this.$ = new NodoAST({label: 'TIPO_DEC_VARIABLE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 156: case 157: case 158: case 159:
 this.$ = new NodoAST({label: 'TIPO_VARIABLE_NATIVA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 160:
 this.$ = new NodoAST({label: 'TIPO_VARIABLE_NATIVA', hijos: [new NodoAST({label: 'ID', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 161:
 this.$ = new NodoAST({label: 'ESCRIBA_REGISTRO', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),{22:$Vi,78:37,79:38,80:39,81:40,82:41,83:42,84:43},{22:[1,45]},{9:46,22:$Vj,23:[1,49],42:47,43:23,44:$V8,45:$V9,46:$Va,47:[1,50],48:[1,51],65:[1,48],85:$Vk,111:52},{9:55,22:$Vj,43:23,44:$V8,45:$V9,46:$Va},o($Vl,[2,33]),{44:[1,56]},{44:[1,57]},{34:[1,58]},{25:[1,59]},{25:[1,60]},{23:[1,61]},{30:[1,62]},{34:[1,63]},{22:[2,154]},{22:[2,155]},{1:[2,1]},o($Vh,[2,2]),{25:[1,64],71:[1,65]},o($Vm,[2,83]),o($Vm,[2,84]),o($Vm,[2,85]),o($Vm,[2,86]),o($Vm,[2,87]),o($Vm,[2,88]),o($Vm,[2,93],{44:[1,67],54:[1,66]}),{34:[1,68]},{22:$Vn,27:86,29:69,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{9:88,22:$Vj,43:23,44:$V8,45:$V9,46:$Va,65:[1,89]},{22:$Vy,66:[1,90]},{22:$Vn,24:[1,92],26:93,27:86,29:94,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{25:[1,95]},{25:[1,96]},o([22,44,45,46],$Vz,{85:$VA}),{9:46,22:$Vj,42:98,43:23,44:$V8,45:$V9,46:$Va,65:[1,99],85:$Vk,111:52},{22:$Vn,27:86,29:100,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:101,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($Vl,[2,34]),o($Vl,[2,35]),{22:$Vn,27:86,29:102,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($Vh,[2,47]),o($Vh,[2,46]),{22:$Vn,27:86,29:103,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{2:$V0,4:104,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{7:105,9:106,22:$Vj,38:20,43:23,44:$V8,45:$V9,46:$Va,114:$Vf,115:$Vg},o($Vl,[2,76]),{22:$Vi,79:107,80:108,81:109,82:110,83:111,84:112},{22:$VB,68:113,98:$VC,99:$VD,116:$VE,117:$VF},{22:$Vn,27:86,29:119,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$VG,36:[1,120],70:121,72:122},{25:[1,124],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{22:$Vn,27:86,29:140,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($VW,[2,120],{111:143,42:145,23:[1,146],47:[1,141],48:[1,142],65:[1,144],85:$Vk}),{22:$Vn,27:86,29:147,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:148,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($VW,[2,118]),o($VW,[2,119]),o($VW,[2,121]),o($VW,[2,122]),o($VW,[2,123]),{22:$Vn,26:149,27:86,29:94,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,86:[1,150],97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($VW,[2,126]),o($VW,[2,127]),o($VW,[2,128]),o($VW,[2,129]),o($VW,[2,130]),o($VW,[2,131]),o($VW,[2,132]),{22:$VX,108:151,109:152},{22:$Vn,27:86,29:154,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$VY,66:[1,155]},{34:[1,157]},o($VZ,[2,147],{111:158,85:$Vk}),{25:[1,159]},{24:[1,160],71:$V_},o($V$,[2,153],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV}),o($Vh,[2,97]),o($Vh,[2,98]),{22:$Vn,27:86,29:162,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{9:88,22:$Vj,43:23,44:$V8,45:$V9,46:$Va,65:[1,163]},{22:$Vy},{45:$VH,46:$VI,74:$VJ,75:$VK,86:[1,164],87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{25:[1,165],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{36:[1,166],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{24:[1,167],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,31:[1,168],32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{22:$Vn,27:86,29:169,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:170,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($Vm,[2,77]),o($Vm,[2,78]),o($Vm,[2,79]),o($Vm,[2,80]),o($Vm,[2,81]),o($Vm,[2,82]),o($Vm,[2,92],{69:171,44:[1,172],85:$V01}),o($V11,[2,156]),o($V11,[2,157]),o($V11,[2,158]),o($V11,[2,159]),o($V11,[2,160]),o($Vm,[2,91],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV}),{30:[1,175],54:[1,174]},{36:[1,176],71:[1,177]},o($V21,[2,68]),{54:[1,178]},o($Vl,[2,30]),{22:$Vn,27:86,29:179,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:180,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:181,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:182,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:183,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:184,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:185,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:186,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:187,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:188,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:189,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:190,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:191,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:192,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{22:$Vn,27:86,29:193,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($V31,[2,99],{90:$VO}),o($VW,[2,106]),o($VW,[2,107]),o($VW,$Vz,{65:[1,194],85:$VA}),{22:$Vy,110:[1,195],112:[1,196]},o($VW,[2,145],{65:[1,197]}),{22:$Vn,24:[1,198],26:199,27:86,29:94,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{36:[1,200],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},o($V41,[2,117],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS}),{71:$V_,86:[1,201]},o($VW,[2,125]),{31:[1,202]},{31:[2,135],71:[1,203]},{54:[1,204]},{25:[1,205],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{34:[1,206]},o($VZ,[2,146],{111:207,85:$Vk}),{22:$Vn,27:86,29:208,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($VZ,[2,149],{85:$VA}),o($Vh,[2,20]),{25:[1,209]},{22:$Vn,27:86,29:210,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{45:$VH,46:$VI,74:$VJ,75:$VK,86:[1,211],87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{22:$VY},o($V51,[2,151]),o($Vl,[2,32]),{30:[1,212]},{30:[1,213]},{28:[1,214]},{25:[1,215],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{25:[1,216],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},o($Vm,[2,94],{44:[1,217],85:$V61}),{22:$Vn,27:86,29:219,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{86:[1,220]},{22:$VB,68:221,98:$VC,99:$VD,116:$VE,117:$VF},{2:$V0,4:222,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{30:[1,224],54:[1,223]},{22:$VG,72:225},{22:$VB,68:226,73:[1,227],98:$VC,99:$VD,116:$VE,117:$VF},o($V71,[2,100],{87:$VL,88:$VM,89:$VN,90:$VO}),o($V71,[2,101],{87:$VL,88:$VM,89:$VN,90:$VO}),o($V31,[2,102],{90:$VO}),o($V31,[2,103],{90:$VO}),o($V31,[2,104],{90:$VO}),o($V31,[2,105],{90:$VO}),o($V81,[2,109],{45:$VH,46:$VI,87:$VL,88:$VM,89:$VN,90:$VO}),o($V81,[2,110],{45:$VH,46:$VI,87:$VL,88:$VM,89:$VN,90:$VO}),o($V81,[2,111],{45:$VH,46:$VI,87:$VL,88:$VM,89:$VN,90:$VO}),o($V81,[2,112],{45:$VH,46:$VI,87:$VL,88:$VM,89:$VN,90:$VO}),o($V91,[2,113],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ}),o($V91,[2,114],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ}),o($V41,[2,115],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS}),o([24,25,31,36,54,71,86,96,113],[2,116],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT}),{45:$VH,46:$VI,54:[1,228],74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{110:[1,229],112:[1,230]},o($VW,[2,137]),{34:[1,231]},{22:$VY,110:[1,232],112:[1,233]},o($VW,[2,22]),{24:[1,234],71:$V_},o($VW,[2,108]),o($VW,[2,124]),o($VW,[2,133]),{22:$VX,108:235,109:152},{22:$Vn,27:86,29:236,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($Vl,[2,31]),{22:$Vn,27:86,29:237,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($VZ,[2,148],{85:$VA}),{36:[1,238],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},o($Vh,[2,21]),o($V$,[2,152],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV}),o($V51,[2,150]),{50:239,51:240,52:241,53:$Va1,55:$Vb1},{2:$V0,4:244,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{23:[1,245]},{22:$Vc1,35:246},{22:$Vc1,35:248},{22:$Vn,27:86,29:249,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{86:[1,250]},o($Vm,[2,90],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV}),o($Vd1,[2,96]),{30:[1,251],69:252,85:$V01},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,31:[1,253],32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{22:$VB,68:254,98:$VC,99:$VD,116:$VE,117:$VF},{2:$V0,4:255,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},o($V21,[2,67]),o($V21,[2,69],{69:256,85:$V01}),{74:[1,257]},{22:$Vn,27:86,29:258,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},o($VW,[2,138]),{34:[1,259]},{36:[1,260]},o($VW,[2,139]),{34:[1,261]},o($VW,[2,23]),{31:[2,134]},o([31,71],[2,136],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV}),{36:[1,262],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{25:[1,263]},{31:[1,264],51:265,52:266,53:$Va1,55:$Vb1},o($Ve1,[2,41]),o($Ve1,[2,42]),{22:$Vn,27:86,29:267,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{54:[1,268]},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,31:[1,269],32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{22:$Vn,27:86,29:270,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{36:[1,271]},{9:272,22:$Vj,43:23,44:$V8,45:$V9,46:$Va,47:[1,273],48:[1,274]},{36:[1,275]},o($Vm,[2,89],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV}),o($Vd1,[2,95]),{2:$V0,4:276,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{30:[1,277],85:$V61},o($Vh,[2,63]),{30:[1,278],69:279,85:$V01},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,31:[1,280],32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},o($V21,[2,70],{85:$V61}),{22:$VB,68:281,98:$VC,99:$VD,116:$VE,117:$VF},o([24,25,31,36,54,71,86,113],[2,143],{45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU}),{36:[1,282]},o($VW,[2,140]),{36:[1,283]},{25:[1,284]},o($Vh,[2,59]),o($Vh,[2,39]),o($Ve1,[2,40]),o($Ve1,[2,43]),{45:$VH,46:$VI,54:[1,285],74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{2:$V0,4:286,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},o($Vh,[2,24]),{24:[1,287],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{30:[1,288]},{22:$Vn,27:86,29:289,30:$Vo,34:$Vp,43:80,46:$Vq,85:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:81,104:82,105:83,106:84,107:85},{36:[2,37]},{36:[2,38]},{30:[1,290]},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,31:[1,291],32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{2:$V0,4:292,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{2:$V0,4:293,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{30:[1,294],85:$V61},o($Vh,[2,66]),{75:[1,295]},o($VW,[2,141]),o($VW,[2,142]),o($Vh,[2,60]),{2:$V0,4:296,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},o($Ve1,[2,45],{7:4,8:5,9:6,10:7,13:10,14:11,16:13,17:14,18:15,19:16,20:17,21:18,38:20,43:23,6:36,2:$V0,11:$V1,12:$V2,15:$V3,22:$V4,28:$V5,32:$V6,33:$V7,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg}),{25:[1,297]},{2:$V0,4:298,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{36:[2,36],45:$VH,46:$VI,74:$VJ,75:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,113:$VV},{2:$V0,4:299,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},o($Vh,[2,61]),{2:$V0,6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,31:[1,300],32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,31:[1,301],32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{2:$V0,4:302,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},o($V21,[2,71]),o($Ve1,[2,44],{7:4,8:5,9:6,10:7,13:10,14:11,16:13,17:14,18:15,19:16,20:17,21:18,38:20,43:23,6:36,2:$V0,11:$V1,12:$V2,15:$V3,22:$V4,28:$V5,32:$V6,33:$V7,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg}),o($Vh,[2,25]),{2:$V0,6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,31:[1,303],32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,31:[1,304],32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},o($Vh,[2,62]),o($Vh,[2,64]),{2:$V0,6:36,7:4,8:5,9:6,10:7,11:$V1,12:$V2,13:10,14:11,15:$V3,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,28:$V5,31:[1,305],32:$V6,33:$V7,38:20,43:23,44:$V8,45:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,67:$Ve,114:$Vf,115:$Vg},o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,[2,65])],
defaultActions: {33:[2,154],34:[2,155],35:[2,1],235:[2,134],273:[2,37],274:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:// comentario simple
break;
case 3:// comentario multiple l√≠neas
break;
case 4:return 'string';
break;
case 5:return 'number';
break;
case 6:return 116;
break;
case 7:return 'nada';
break;
case 8:return 115;
break;
case 9:return 'consola';
break;
case 10:return 'mostrar';
break;
case 11:return 67;
break;
case 12:return 'devuelve';
break;
case 13:return 'nulo';
break;
case 14:return 66;
break;
case 15:return 110;
break;
case 16:return 112;
break;
case 17:return 'sisas';
break;
case 18:return 'nonada';
break;
case 19:return 100;
break;
case 20:return 101;
break;
case 21:return 57;
break;
case 22:return 49;
break;
case 23:return 53;
break;
case 24:return 55;
break;
case 25:return 56;
break;
case 26:return 28;
break;
case 27:return 32;
break;
case 28:return 33;
break;
case 29:return 41;
break;
case 30:return 39;
break;
case 31:return 'graficar_ts';
break;
case 32:return 73;
break;
case 33:return 25;
break;
case 34:return 71;
break;
case 35:return 54;
break;
case 36:return 30;
break;
case 37:return 31;
break;
case 38:return 34;
break;
case 39:return 36;
break;
case 40:return 85;
break;
case 41:return 86;
break;
case 42:return 65;
break;
case 43:return 47
break;
case 44:return 45;
break;
case 45:return 48
break;
case 46:return 46;
break;
case 47:return 90;
break;
case 48:return 87;
break;
case 49:return 88;
break;
case 50:return 89;
break;
case 51:return 92;
break;
case 52:return 91;
break;
case 53:return 75;
break;
case 54:return 74;
break;
case 55:return 93;
break;
case 56:return 'igual';
break;
case 57:return 44;
break;
case 58:return 94;
break;
case 59:return 95;
break;
case 60:return 96;
break;
case 61:return 97;
break;
case 62:return 113;
break;
case 63: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 'string'; 
break;
case 64: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 'string'; 
break;
case 65: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 'string'; 
break;
case 66:return 'number';
break;
case 67:return 22;
break;
case 68:return 5;
break;
case 69:
  const er = new error_1.Error({ tipo: 'lexico', linea: `${yy_.yylineno + 1}`, descripcion: `El valor "${yy_.yytext}" no es valido, columna: }` });
  errores_1.Errores.getInstance().push(er);
  
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\s+\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:catring\b)/,/^(?:tero\b)/,/^(?:siono\b)/,/^(?:nada\b)/,/^(?:const\b)/,/^(?:consola\b)/,/^(?:mostrar\b)/,/^(?:funcion\b)/,/^(?:devuelve\b)/,/^(?:nulo\b)/,/^(?:push\b)/,/^(?:length\b)/,/^(?:pop\b)/,/^(?:sisas\b)/,/^(?:nonada\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:continue\b)/,/^(?:bucle\b)/,/^(?:hacer\b)/,/^(?:repetidor\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:graficar_ts\b)/,/^(?:Array\b)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:<-)/,/^(?:!=)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:`[^\`]*`)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}